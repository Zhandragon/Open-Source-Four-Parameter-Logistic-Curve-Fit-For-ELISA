#03/02/2023 - Genesis Lung & ChatGPT - Open-Source Four Parameter Logistic Curve Fit For ELISA
#This code was generated by Genesis Lung as a combination of human debugging and original code combined with ChatGPT
#outputs providing the package suggestions and skeleton code outline, iterated across >100 prompts that were
#successively tweaked or had subsections generated independently.

#In terms of dependencies, you must install matplotlib, numpy, and scipy packages for this code to work.

#For input, the program takes raw optical absorbance ELISA plate reader values as a CSV file with UTF-8 BOM encoding.
#By default the expected input file is named "Input_4PL.csv" but can be changed by editing the code on line 44.
#The input file should be placed in the same folder directory that the code is executed in.
#The first column should contain sample ID names.
#The second column should contain raw unknown sample absorbance values.
#The third column should contain raw standard replicate 1 absorbance values.
#The fourth column should contain raw standard replicate 2 absorbance values (paired by row with replicate 1).
#The fifth column should contain standard protein concentrations (paired by row with corresponding standard replicate).
#The sixth column should contain raw blank well absorbance values.

#As output, the program generates a verbose CSV file with a description header, the parameters and equation of the 4PL
#fit, the R-squared value, blank correction factor, matched raw to adjusted standard values, and matched sample ID
#to both raw and adjusted sample absorbance values and backfitted protein concentrations.
#The output file is exported by default to the same folder directory the code is executed in.
#By default, the output file is named "4PL_Results.csv" but this can be changed in the code on line 120.
#The code also generates a visualized graph overlaying the protein standard.
#The title of the graph can be changed on line 153.

import csv
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit

def four_parameter_logistic(x, A, B, C, D):
    """4PL logistic equation."""
    return ((A-D)/(1.0+(np.sign((x/C))*np.abs(x/C)**B))) + D
            #C*(np.sign((A-D)/(x-D)-1)*np.abs((A-D)/(x-D)-1))**(1/B)
            #C*(np.sign((A-D)/(x-D)-1)*np.abs((A-D)/(x-D)-1))**(1/B)
            #C*(((A-D)/(x-D)-1))**(1/B)
            #((A-D)/(1.0+(np.sign((x/C))*np.abs(x/C)**B))) + D
            #np.sign((A-D)/(x-D)-1)*np.abs((A-D)/(x-D)-1)**(1/B)

def four_parameter_logistic_inverse(g, A, B, C, D):
    return C*np.sign((A-D)/(g-D)-1)*np.abs((A-D)/(g-D)-1)**(1/B)

# Read in data
with open('Input_4PL.csv', 'r', encoding='utf-8-sig') as f:
    reader = csv.reader(f)
    data = list(reader)

# Separate columns
sample_names = [i[0] for i in data]
sample_x_values = [i[1] for i in data]
standard_x_values1 = [i[2] for i in data]
standard_x_values2 = [i[3] for i in data]
standard_y_values = [i[4] for i in data]
blank_x_values = [i[5] for i in data]

# Remove blanks
sample_x_values = [x for x in sample_x_values if x]
standard_x_values1 = [x for x in standard_x_values1 if x]
standard_x_values2 = [x for x in standard_x_values2 if x]
standard_y_values = [x for x in standard_y_values if x]
blank_x_values = [x for x in blank_x_values if x]

# Convert to floats
sample_x_values = [float(i) for i in sample_x_values]
standard_x_values1 = [float(i) for i in standard_x_values1]
standard_x_values2 = [float(i) for i in standard_x_values2]
standard_y_values = [float(i) for i in standard_y_values]
blank_x_values = [float(i) for i in blank_x_values]

print("Raw Sample Absorbance Values: " + str(sample_x_values))
print("Standard Replicate1 Raw Absorbance Values: " + str(standard_x_values1))
print("Standard Replicate2 Raw Absorbance Values: " + str(standard_x_values2))
print("Standard Protein Concentration Values (pg/mL): " + str(standard_y_values))
print("Blank Well Raw Absorbance Values: " + str(blank_x_values))

# Get averages for R
R = []
for i in range(len(standard_x_values1)):
    R.append((standard_x_values1[i]+standard_x_values2[i])/2)

print("Average Standard Absorbance Values: " + str(R))

# Get average for blank x values
blank_x_average = sum(blank_x_values)/len(blank_x_values)

print("Blank Correction Factor: " + str(blank_x_average))

# Get W
W = []
for i in range(len(R)):
    W.append(R[i] - blank_x_average)

print("Blank-corrected Standard absorbance values: " + str(W))

# Get Z
Z = []
for i in range(len(sample_x_values)):
    Z.append(sample_x_values[i] - blank_x_average)

print("Blank-corrected Sample absorbance values: " + str(Z))
# Fit curve
popt, pcov = curve_fit(four_parameter_logistic, standard_y_values, W, maxfev=20000)
A, B, C, D = popt

print("Parameter Values (A, B, C, D):" + str(popt))

# Get results
results = four_parameter_logistic_inverse(Z, A, B, C, D)

print("Protein concentrations of samples: " + str(results))

# Get R-squared
residuals = W - four_parameter_logistic(standard_y_values, *popt)
ss_res = np.sum(residuals**2)
ss_tot = np.sum((W-np.mean(W))**2)
r_squared = 1 - (ss_res / ss_tot)
print("R-Squared Value: " + str(r_squared))

# Output results
with open('4PL_Results.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(['This 4-Parameter Logistic Curve fit output was generated by code written by Genesis Lung in '
                     'tandem with ChatGPT (03/02/2023 Version).'])
    writer.writerow([])
    writer.writerow(['4PL Logistic Equation', '4PL Parameter A', '4PL Parameter B', '4PL Parameter C',
                     '4PL Parameter D'])
    writer.writerow(['D+(A-D)/(1.0+(x/C)^B)', A, B, C, D])
    writer.writerow([])
    writer.writerow(['R-Squared Value', 'Blank Correction Factor'])
    writer.writerow([r_squared, blank_x_average])
    writer.writerow([])
    writer.writerow(['Blank Well Absorbance Values'])
    for i in range(len(blank_x_values)):
        writer.writerow([blank_x_values[i]])
    writer.writerow([])
    writer.writerow(['Raw Replicate 1 Standard Absorbance Values', 'Raw Replicate 2 Standard Absorbance Values',
                     'Average Blank-Corrected Standard Absorbance', 'Standard Protein Conc. (pg/mL)'])
    for i in range(len(W)):
        writer.writerow([standard_x_values1[i], standard_x_values2[i], W[i], standard_y_values[i]])
    writer.writerow([])
    writer.writerow(['Sample ID', 'Raw Sample Absorbance Values', 'Blank-Corrected Sample Absorbance',
                     'Sample Concentration (pg/mL)'])
    for i in range(len(sample_x_values)):
        writer.writerow([sample_names[i], sample_x_values[i], Z[i], results[i]])

# Plot
xaxis = np.linspace(0, 160)
yaxis = ((A-D)/(1.0+(np.sign((xaxis/C))*np.abs(xaxis/C)**B))) + D
baxis = []
for i in range(len(blank_x_values)):
    baxis.append(0)
plt.figure()
plt.title('Protein Concentration VS Absorbance')
plt.plot(xaxis, yaxis, 'r-', label='4-Parameter Logistic Curve Fit (r2={:.3f})'.format(r_squared))
plt.plot(results, Z, 'go', label='Experimental Samples')
plt.plot(standard_y_values, W, 'ro', label='Averaged Standards')
plt.plot(standard_y_values, standard_x_values1, 'yo', label='Standard Replicate 1')
plt.plot(standard_y_values, standard_x_values2, 'bo', label='Standard Replicate 2')
plt.plot(baxis, blank_x_values, 'ko', label='Blank Wells')
plt.legend()
plt.xlabel('Absolute Protein Conc. (pg/mL)')
plt.ylabel('Blank-Corrected Absorbance')
plt.show()